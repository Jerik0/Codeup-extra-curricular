# Git Gud
### A Starter Guide For Git
In order to use git effectively, we have to understand it. It's actually not that difficult, it's just an unfamiliar concept so it is important that it is explained simply and thoroughly.

In layman's terms, git simply lets us get our code from our machine to the internet inside of a big code box.

This box is organized into repositories, each one representing a project. Think of them like folders in a file cabinet.

Each project can be contributed to by one or multiple people. 

There are two parts that every single git project needs to function correctly:
1. A local git repository (which is created at the root location of the project, *every time you make a new project*)
2. A repository on Github that will serve as the 'file cabinet', which we will tell our machine to push to.

First thing we need to do is*tell git that this project is going to be considered a git repository on our machine.* 

To do this we first make sure we're at the root folder location in the terminal, and then type 

```git init```

Git will now know that this directory and all of its contents are a local (only on this machine) git repository, and we can*now use git commands from the root directory of the project.* If we do not ```git init``` first, we can not use git commands.

The second thing we need to do is to set up the**online repository** that we'll be pushing our local code to, so others may see it, or if we're on a team, they can retrieve the code you wrote, and pull it into their machine's local repository.

visit ```github.com -> your profile -> new repo```.

Copy the https key from the newly created repo. We need this so that your local machine will know exactly which repo to push to. 

The way we tell our local repo inside of our project's directory to use that online repo specifically, is by typing

```git remote add origin YOUR_HTTPS_KEY_PASTED_HERE```

At this point, what we have done is told *only this specific project's directory git repo* that it is now attached to its remote repo (the one we just created on github) and will be able to push code to it, pull code from it and use it in general. Also we named it 'origin', as is customary (not mandatory) for every remote to be named.

__________________________________________

# How To Push and Pull Code Using Our Remote Repo
So our local project repo can talk to the remote repo, but how in the world do we make it do the thing??

In order to send code to the remote (online) repo, we need to tell git *exactly what files/images/etc we want to save, or 'commit'.* So we need to ```git add FILE_NAME``` or if we want to add *all* of the files we've created to be saved, we type ```git add .``` ***note: the '.' on the end adds everything that has been created and/or edited since the last push***

Now that we've*added*the files that we will commit (or 'save a snapshot of'), we will type in the project root terminal again

```git commit -m 'your message about the files you updated here'```

The -m flag means that you are about to leave a message to anyone that sees this particular update, telling them what this commit is for. The message must be surrounded by 'quotes'.

Once we have added and committed our files, we then only need to push them to the remote repo. The way we do this is by typing

```git push --set-upstream origin master```

***THIS IS ONLY FOR THE FIRST TIME WE PUSH TO A NEW REMOTE INSIDE THIS PROJECT.***

Every time that we want to push to that remote in this specific project, after that first push with the weird set upstream thingie, we simply type ```git push``` whenever we want to push, because now it will know exactly where to push everything to.

**HERE IS THE NORMAL WORK FLOW FOR PUSHING TO GITHUB:**

==========================

**Step 1** In the project root terminal, type ```git status```.
* This should show us a number of files (*after they've been created of course*) that are 'unstaged for commit', or something similar.

============

**Step 2** Now that we've seen which files need to be added for commit, ```git add FILENAME``` or ```git add .```
* This should add the files you specify to be committed

============

**Step 3** Now we commit the files that have been added. ```git commit -m 'commit message'```
* This saves a snapshot of the state the files are in at the time you commit them.

============

**Step 4** We send the saved files to github. This is the step that actually copies the added and committed files from our local machine to the remote github repo. ```git push```
* After this step we should see the pushed files in the github repo.

==========================

***CONGRATS! You now know how to push your code into a github repo!***

